{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","redux/selectors/profile-selectors.ts","redux/selectors/auth-selectors.ts","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useState","editorMode","setEditorMode","status","setStatus","isMe","userId","profileId","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","type","ProfileTextField","editMode","label","restProps","str","Grid","item","ProfileData","profile","setEditMode","submitStatus","useSelector","state","profilePage","errorMessage","useDispatch","lookingForAJob","initialValues","fullName","lookingForAJobDescription","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","Container","Paper","style","padding","elevation","Button","variant","color","onClick","prev","onSubmit","values","setProfileInfo","validate","render","handleSubmit","submitting","errors","submitError","container","direction","justify","alignItems","spacing","name","size","data","multiline","rows","Object","keys","map","key","errMessage","newKey","hasError","toLowerCase","includes","error","disabled","ProfileInfo","className","s","descriptionBlock","src","photos","large","userPhoto","alt","files","length","setPhoto","Post","message","likesCount","MyPostsForm","addPost","postData","post","form","component","placeholder","combineValidators","isRequired","maxLength","onMouseLeave","reset","MyPosts","React","memo","postsElements","posts","p","postsBlock","mapDispatchToProps","MyPostsContainer","connect","Profile","getProfile","getStatus","getAuthId","auth","userData","id","ProfileContainer","Number","this","match","params","history","push","requestProfile","requestStatus","refreshProfile","prevState","isAuth","Preloader","to","Component","compose","isAuthorized","withRouter"],"mappings":"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","file":"static/js/4.281ac06c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2xJaO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3zfSV\",\"posts\":\"MyPosts_posts__2CbOe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2d5jo\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport './ProfileInfo.module.css';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    setStatus: (status: string) => void,\r\n    userId: number\r\n    profileId: number\r\n}\r\n\r\nexport function ProfileStatus(props: ProfileStatusPropsType) {\r\n    const [editorMode, setEditorMode] = useState<boolean>(false);\r\n    const [status, setStatus] = useState<string>(props.status);\r\n    const isMe = props.userId === props.profileId;\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onInputBlur = () => {\r\n        props.setStatus(status);\r\n        setEditorMode(false)\r\n    }\r\n\r\n    const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editorMode &&\r\n            <div>\r\n                <span onDoubleClick={() => isMe && setEditorMode(true)}>\r\n                    {props.status ? props.status : '-------'}\r\n                </span>\r\n            </div>\r\n            }\r\n            {editorMode && isMe &&\r\n            <div>\r\n                <input onChange={onInputChange}\r\n                       autoFocus={true}\r\n                       onBlur={onInputBlur}\r\n                       type=\"text\"\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n/*type ProfileStatusStateType = {\r\n    editorMode: boolean,\r\n    status: string\r\n}\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusPropsType, ProfileStatusStateType> {\r\n    constructor(props: ProfileStatusPropsType) {\r\n        super(props);\r\n        this.state = {\r\n            editorMode: false,\r\n            status: this.props.status\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<ProfileStatusStateType>) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({status: this.props.status});\r\n        }\r\n    }\r\n\r\n    onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({status: e.currentTarget.value});\r\n    }\r\n\r\n    setEditorMode = (editMode: boolean) => {\r\n        this.setState({editorMode: editMode});\r\n    }\r\n\r\n    onInputBlur = (e: FocusEvent<HTMLInputElement>) => {\r\n        this.setEditorMode(false);\r\n        this.props.setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    render() {\r\n        const isMe = this.props.userId === this.props.profileId\r\n        return (\r\n            <div>\r\n                {!this.state.editorMode &&\r\n                <div>\r\n                <span onDoubleClick={() => isMe && this.setEditorMode(true)}>\r\n                    {this.props.status ? this.props.status : '-------'}\r\n                </span>\r\n                </div>\r\n                }\r\n                {this.state.editorMode && isMe &&\r\n                <div>\r\n                    <input onChange={this.onInputChange}\r\n                           autoFocus={true}\r\n                           onBlur={this.onInputBlur}\r\n                           type=\"text\"\r\n                           value={this.state.status}/>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}*/\r\n\r\nexport default ProfileStatus;","import React from 'react'\r\nimport {Grid} from '@material-ui/core';\r\nimport {TextField, TextFieldProps} from 'mui-rff';\r\n\r\ntype ProfileDataFormPropsType = TextFieldProps & {\r\n    editMode?: boolean\r\n}\r\n\r\nexport function ProfileTextField({\r\n                                     editMode,\r\n                                     value,\r\n                                     label,\r\n                                     ...restProps\r\n                                 }: ProfileDataFormPropsType) {\r\n    const str = `${label}: ${value ? value : 'no info'}`;\r\n    return (\r\n        <Grid item>\r\n            {editMode ?\r\n                <TextField label={label} {...restProps}/> :\r\n                str\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport {\r\n    changeSubmitStatus,\r\n    ContactsType,\r\n    ProfileInfoType,\r\n    ProfileType,\r\n    SubmitStatusType\r\n} from '../../../../redux/profile-reducer';\r\nimport {Button, Container, Grid, Paper} from '@material-ui/core';\r\nimport {Form} from 'react-final-form';\r\nimport {ProfileTextField} from './ProfileDataForm';\r\nimport {Checkboxes} from 'mui-rff';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootState} from '../../../../redux/redux-store';\r\nimport {FORM_ERROR} from 'final-form';\r\n\r\ntype ProfileDataPropsType = {\r\n    isMe: boolean\r\n    profile: ProfileType\r\n    setProfileInfo: (profileInfo: ProfileInfoType) => void\r\n\r\n}\r\n\r\ntype ContactPropsType = {\r\n    prop: string\r\n    value: string | null\r\n}\r\n\r\nexport type ProfileFormData = {\r\n    aboutMe: string,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    facebook: string,\r\n    website: string,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: string,\r\n    github: string,\r\n    mainLink: string\r\n}\r\n\r\nexport function ProfileData({isMe, profile, ...restProps}: ProfileDataPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const submitStatus = useSelector<RootState, SubmitStatusType>(state => state.profilePage.submitStatus)\r\n    const errorMessage = useSelector<RootState, string | undefined>(state => state.profilePage.errorMessage)\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if (submitStatus === 'success') {\r\n            setEditMode(false);\r\n        }\r\n    }, [submitStatus]);\r\n    const lookingForAJob = `job description: ${profile.lookingForAJob ? 'yes' : 'no'}`;\r\n    const initialValues = {\r\n        fullName: profile.fullName,\r\n        lookingForAJob: profile.lookingForAJob,\r\n        lookingForAJobDescription: profile.lookingForAJobDescription,\r\n        aboutMe: profile.aboutMe,\r\n        contacts: {\r\n            facebook: profile.contacts.facebook,\r\n            website: profile.contacts.website,\r\n            vk: profile.contacts.vk,\r\n            twitter: profile.contacts.twitter,\r\n            instagram: profile.contacts.instagram,\r\n            youtube: profile.contacts.youtube,\r\n            github: profile.contacts.github,\r\n            mainLink: profile.contacts.mainLink\r\n        }\r\n    }\r\n\r\n    const onSubmit = (values: ProfileInfoType) => {\r\n        restProps.setProfileInfo(values);\r\n\r\n    }\r\n    const onButtonClick = () => {\r\n        setEditMode(prev => !prev);\r\n    }\r\n    return (\r\n        <Container>\r\n            <Paper style={{padding: '20px'}} elevation={3}>\r\n                {isMe && !editMode &&\r\n                <Button variant={'contained'} color={'primary'} onClick={onButtonClick}>Change</Button>}\r\n\r\n                <Form onSubmit={onSubmit}\r\n                      initialValues={initialValues}\r\n                      validate={values => {\r\n                          return {}\r\n                      }}\r\n                      render={({handleSubmit, submitting, errors, submitError}) => {\r\n                          return (\r\n                              <form onSubmit={handleSubmit}>\r\n                                  <Grid container\r\n                                        direction=\"column\"\r\n                                        justify=\"flex-start\"\r\n                                        alignItems=\"flex-start\"\r\n                                        spacing={2}>\r\n                                      <ProfileTextField editMode={editMode} name={'fullName'} value={profile.fullName}\r\n                                                        label={'full name'} variant={'outlined'} size={'small'}/>\r\n                                      <ProfileTextField editMode={editMode} name={'aboutMe'} value={profile.aboutMe}\r\n                                                        label={'about me'} variant={'outlined'} size={'small'}/>\r\n                                      <Grid item>\r\n                                          {editMode ? <Checkboxes name={'lookingForAJob'} data={{\r\n                                              label: 'Looking for a Job',\r\n                                              value: profile.lookingForAJob\r\n                                          }}/> : lookingForAJob}\r\n                                      </Grid>\r\n                                      <ProfileTextField editMode={editMode} name={'lookingForAJobDescription'}\r\n                                                        value={profile.lookingForAJobDescription}\r\n                                                        label={'job description'} variant={'outlined'} size={'small'}\r\n                                                        multiline\r\n                                                        rows={3}/>\r\n\r\n                                      {Object.keys(profile.contacts).map(key => {\r\n                                          const newKey = key as keyof ContactsType;\r\n                                          let hasError = false\r\n                                          let errMessage;\r\n                                          if (errorMessage &&errorMessage.toLowerCase().includes(key.toLowerCase())) {\r\n                                              hasError = true;\r\n                                              errMessage = <span>invalid url format</span>\r\n                                          }\r\n                                          return (\r\n                                              <>\r\n                                                  <ProfileTextField editMode={editMode} name={`contacts.` + key}\r\n                                                                    key={key}\r\n                                                                    label={key}\r\n                                                                    value={profile.contacts[newKey]}\r\n                                                                    variant={'outlined'}\r\n                                                                    size={'small'}\r\n                                                                    error={hasError}/>\r\n                                                  {errMessage}\r\n                                              </>\r\n                                          );\r\n                                      })}\r\n                                      {editMode && <Grid item>\r\n                                          <Button type={'submit'}\r\n                                                  disabled={submitting} variant={'contained'}\r\n                                                  color={'primary'}>Save</Button>\r\n                                      </Grid>}\r\n                                  </Grid>\r\n                              </form>\r\n                          )\r\n                      }}/>\r\n\r\n\r\n            </Paper>\r\n        </Container>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport './ProfileInfo.module.css';\r\nimport s from './ProfileInfo.module.css';\r\nimport userPhoto from './../../../assets/images/userPhoto.png'\r\nimport ProfileStatus from './ProfileStatus';\r\nimport {ProfileInfoType, ProfileType} from '../../../redux/profile-reducer';\r\nimport {ProfileData} from './ProfileData/ProfileData';\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    setStatus: (status: string) => void\r\n    userId: number\r\n    setPhoto: (photo: File) => void\r\n    setProfileInfo: (profileInfo: ProfileInfoType) => void\r\n}\r\n\r\n\r\nfunction ProfileInfo({profile, setStatus, status, userId, ...restProps}: ProfileInfoPropsType) {\r\n\r\n    const getPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files?.length) {\r\n            restProps.setPhoto(e.currentTarget.files[0]);\r\n        }\r\n    }\r\n    const isMe = !userId || profile.userId === userId;\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={profile.photos.large !== null ? profile.photos.large : userPhoto} alt=\"\"/>\r\n                    {isMe && <input type=\"file\" onChange={getPhoto}/>}\r\n                </div>\r\n\r\n                <ProfileStatus setStatus={setStatus}\r\n                               status={status}\r\n                               userId={userId}\r\n                               profileId={profile.userId}/>\r\n                <ProfileData isMe={isMe} profile={profile} setProfileInfo={restProps.setProfileInfo}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport './Post.module.css';\r\nimport s from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n    message : string\r\n    likesCount: number\r\n}\r\n\r\n\r\nfunction Post({message, likesCount}:PostPropsType) {\r\n    return (\r\n        <div className={s.item}>\r\n            {message}\r\n            <div>\r\n                {likesCount} likes\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Field, Form } from 'react-final-form';\r\nimport {combineValidators, isRequired, maxLength} from '../../../utils/validation/validators';\r\n\r\ntype postDataType = {\r\n    post: string\r\n}\r\n\r\ntype MyPostsFormPropsType = {\r\n    addPost : (post: string)=>void\r\n}\r\n\r\nfunction MyPostsForm({addPost}:MyPostsFormPropsType){\r\n\r\n    const onPostSubmit = (postData: postDataType)=>{\r\n        addPost(postData.post);\r\n    }\r\n\r\n    return(\r\n        <Form onSubmit={onPostSubmit}\r\n        render={({handleSubmit, form})=>(\r\n            <form onSubmit={handleSubmit}>\r\n                <Field name={'post'}\r\n                       component={'input'}\r\n                       type={'textarea'}\r\n                       placeholder = {'enter post'}\r\n                       validate={combineValidators(isRequired, maxLength(10))}\r\n                />\r\n                       <button type={'submit'}\r\n                       onMouseLeave={()=>{form.reset()}}>post</button>\r\n            </form>\r\n        )}/>\r\n    )\r\n}\r\n\r\nexport default MyPostsForm;","import React, {ComponentType} from 'react';\r\nimport './MyPosts.module.css';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport MyPostsForm from './MyPostsForm';\r\n\r\n\r\nconst MyPosts = React.memo<ComponentType<MyPostsPropsType>>((props: MyPostsPropsType) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div>\r\n                My posts\r\n            </div>\r\n            <div>\r\n                <MyPostsForm addPost={props.addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPost, PostType} from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../../redux/redux-store';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (post:string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst mapStateToProps = (state: RootState): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps: MapDispatchPropsType = {\r\n    addPost\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {ComponentType} from 'react';\r\nimport './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileInfoType, ProfileType} from '../../redux/profile-reducer';\r\nimport {ProfileFormData} from './ProfileInfo/ProfileData/ProfileData';\r\n\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    setStatus: (status: string) => void\r\n    userId: number\r\n    setPhoto: (photo: File) => void\r\n    setProfileInfo: (profileInfo: ProfileInfoType)=>void\r\n}\r\n\r\nconst Profile = React.memo<ComponentType<ProfilePropsType>>((props: ProfilePropsType) => {\r\n    return (\r\n        <section>\r\n            <ProfileInfo {...props}/>\r\n            <MyPostsContainer/>\r\n        </section>\r\n    );\r\n})\r\n\r\nexport default Profile;","import {RootState} from '../redux-store';\r\n\r\nexport const getProfile = (state:RootState)=>{\r\n    return state.profilePage.profile\r\n}\r\n\r\nexport const getStatus = (state:RootState)=>{\r\n    return state.profilePage.status\r\n}","import {RootState} from '../redux-store';\r\n\r\nexport const getAuthId = (state:RootState)=>{\r\n    return state.auth.userData?.id\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Profile from './Profile';\r\nimport {RootState} from '../../redux/redux-store';\r\nimport {\r\n    ProfileInfoType,\r\n    ProfileType,\r\n    requestProfile,\r\n    requestStatus,\r\n    setPhoto,\r\n    setProfileInfo,\r\n    setStatus\r\n} from '../../redux/profile-reducer';\r\nimport {Redirect, RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from '@reduxjs/toolkit';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport {getProfile, getStatus} from '../../redux/selectors/profile-selectors';\r\nimport {getAuthId} from '../../redux/selectors/auth-selectors';\r\nimport {ProfileFormData} from './ProfileInfo/ProfileData/ProfileData';\r\n\r\n;\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, never> {\r\n\r\n    constructor(props: ProfileContainerPropsType) {\r\n        super(props);\r\n    };\r\n\r\n    refreshProfile() {\r\n        let userId = Number(this.props.match.params.userId);\r\n        if (!userId) {\r\n            userId = this.props.userId as number;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n\r\n        this.props.requestProfile(userId);\r\n        // setTimeout(() => {\r\n        this.props.requestStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    };\r\n\r\n    componentDidUpdate(prevState: ProfileContainerPropsType) {\r\n        if (this.props.match.params.userId !== prevState.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.isAuth){\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n\r\n        if (!this.props.profile) {\r\n            return (\r\n                <Preloader/>\r\n            );\r\n        }\r\n        return (\r\n            <Profile profile={this.props.profile} status={this.props.status} setStatus={this.props.setStatus}\r\n                     userId={this.props.userId as number} setPhoto={this.props.setPhoto} setProfileInfo={this.props.setProfileInfo}/>\r\n        );\r\n    };\r\n\r\n}\r\n\r\ntype ProfilePathParamsType = {\r\n    userId: string;\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    userId: number | undefined\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    requestProfile: (userId: number) => void,\r\n    setStatus: (status: string) => void,\r\n    requestStatus: (userId: number) => void\r\n    setPhoto: (photoFile: File) => void\r\n    setProfileInfo: (profileInfo: ProfileInfoType) => void\r\n};\r\n\r\ntype OwnProfileContainerPropsType = MapDispatchPropsType & MapStatePropsType;\r\n\r\ntype ProfileContainerPropsType = RouteComponentProps<ProfilePathParamsType> & OwnProfileContainerPropsType\r\n\r\nconst mapStateToProps = (state: RootState): MapStatePropsType => ({\r\n    profile: getProfile(state),\r\n    status: getStatus(state),\r\n    userId: getAuthId(state),\r\n    isAuth: state.auth.isAuthorized\r\n});\r\n\r\n\r\nconst mapDispatchToProps: MapDispatchPropsType = {\r\n    requestProfile,\r\n    setStatus,\r\n    requestStatus,\r\n    setPhoto,\r\n    setProfileInfo\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}