{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsForm.tsx","components/Dialogs/Dialogs.tsx","hoc/AuthRoute/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","name","key","photo","path","className","s","dialog","f","circularLandscape","src","alt","to","dialogName","Message","message","fromYou","messagePosition","rightMessage","leftMessage","imgPosition","yourImg","personImg","DialogsForm","props","onSubmit","data","sendMessage","render","handleSubmit","form","invalid","component","TextArea","type","placeholder","validate","combineValidators","isRequired","maxLength","disabled","onMouseLeave","reset","Dialogs","dialogsElements","dialogs","map","d","id","messagesElements","messages","m","dialogItems","allMessages","newMessage","WithAuthRedirect","ComposedComponent","connect","state","isAuth","auth","isAuthorized","restProps","mapDispatchToProps","compose","messagesPage"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,WAAa,4BAA4B,OAAS,wBAAwB,SAAW,0BAA0B,WAAa,4BAA4B,YAAc,6BAA6B,QAAU,yBAAyB,YAAc,6BAA6B,aAAe,8BAA8B,QAAU,yBAAyB,UAAY,6B,4GC8B/dC,MAjBf,YAA8D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MACtBC,EAAO,YAAcF,EAE3B,OACI,sBAAKG,UAAWC,IAAEC,OAAlB,UACI,qBAAKF,UAAWG,IAAEC,kBAAlB,SACI,qBAAKC,IAAKP,EAAOQ,IAAI,OAEzB,cAAC,IAAD,CAASC,GAAIR,EAAb,SACI,qBAAKC,UAAWC,IAAEO,WAAlB,SACKZ,UCKNa,MAjBf,YAA+D,IAA7CC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,QAASb,EAA0B,EAA1BA,MAG5Bc,EAAkBD,EAAUV,IAAEY,aAAeZ,IAAEa,YAC/CC,EAAcJ,EAAUV,IAAEe,QAAUf,IAAEgB,UAC1C,OACI,sBAAKjB,UAAWY,EAAhB,UACI,qBAAKZ,UAAS,UAAKe,EAAL,YAAoBZ,IAAEC,kBAAtB,KAAd,SACI,qBAAKC,IAAKP,EAAOQ,IAAI,OAEzB,qBAAKN,UAAWC,IAAES,QAAlB,SACKA,Q,wBCmBFQ,MA5Bf,SAAqBC,GAMjB,OACI,cAAC,IAAD,CAAMC,SALc,SAACC,GACrBF,EAAMG,YAAYD,EAAKX,UAKjBa,OAAQ,gBAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,QAAtB,OACJ,uBAAMN,SAAUI,EAAhB,UACI,cAAC,IAAD,CAAO5B,KAAM,UACN+B,UAAWC,IACXC,KAAM,WACNC,YAAa,oBACbC,SAAUC,YAAkBC,IAAYC,YAAU,OAEzD,wBAAQL,KAAM,SACNM,SAAUT,EACVU,aAAc,WACVX,EAAKY,SAHjB,yBCQPC,MA7Bf,SAAiBnB,GACb,IAAIoB,EAAkBpB,EAAMqB,QACvBC,KAAI,SAAAC,GACD,OACQ,cAAC,EAAD,CAAY9C,KAAM8C,EAAE9C,KAAiBE,MAAO4C,EAAE5C,OAAf4C,EAAEC,OAI7CC,EAAmBzB,EAAM0B,SAASJ,KAAI,SAAAK,GAAC,OAAI,cAAC,EAAD,CAAoBpC,QAASoC,EAAEpC,QAASC,QAASmC,EAAEnC,QAC1Cb,MAAOgD,EAAEhD,OADJgD,EAAEH,OAI/D,OACI,sBAAK3C,UAAWC,IAAEuC,QAAlB,UACI,qBAAKxC,UAAWC,IAAE8C,YAAlB,SACKR,IAEL,sBAAKvC,UAAWC,IAAE4C,SAAlB,UACI,qBAAK7C,UAAWC,IAAE+C,YAAlB,SACKJ,IAEL,qBAAK5C,UAAWC,IAAEgD,WAAlB,SACI,cAAC,EAAD,CAAa3B,YAAaH,EAAMG,uB,8BCArC4B,MApBf,SAA6BC,GAiBzB,OAAOC,aAJiB,SAACC,GAAD,MAA0C,CAC9DC,OAAQD,EAAME,KAAKC,gBAGhBJ,EAfP,SAAsBjC,GACaA,EAAxBmC,OADsC,IAC3BG,EAD0B,YACbtC,EADa,YAE5C,OAAKA,EAAMmC,OAEJ,cAACH,EAAD,eAAuBM,IADnB,cAAC,IAAD,CAAUlD,GAAI,e,QCS3BmD,EAA2C,CAC7CpC,iBAIWqC,sBACXP,aAXoB,SAACC,GAAD,MAA0C,CAC9Db,QAASa,EAAMO,aAAapB,QAC5BK,SAAUQ,EAAMO,aAAaf,YASJa,GACzBR,EAFWS,CAGbrB","file":"static/js/4.de0b9401.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__holZG\",\"dialogItems\":\"Dialogs_dialogItems__CH3a-\",\"dialog\":\"Dialogs_dialog__3GV_v\",\"dialogName\":\"Dialogs_dialogName__3SXDA\",\"active\":\"Dialogs_active__6mBNZ\",\"messages\":\"Dialogs_messages__14Gis\",\"newMessage\":\"Dialogs_newMessage__3QlX-\",\"allMessages\":\"Dialogs_allMessages__XVBzr\",\"message\":\"Dialogs_message__lz9nj\",\"leftMessage\":\"Dialogs_leftMessage__2rTbo\",\"rightMessage\":\"Dialogs_rightMessage__1aAEO\",\"yourImg\":\"Dialogs_yourImg__1Q9uQ\",\"personImg\":\"Dialogs_personImg__3SKAg\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport \"./../Dialogs.module.css\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport \"./../../Navigation/Friends/Friend/Friend.module.css\"\r\nimport f from \"./../../Navigation/Friends/Friend/Friend.module.css\";\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string,\r\n    key: string,\r\n    photo: string\r\n}\r\n\r\nfunction DialogItem({name, key, photo}: DialogItemPropsType) {\r\n    const path = \"/dialogs/\" + key;\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <div className={f.circularLandscape}>\r\n                <img src={photo} alt=\"\"/>\r\n            </div>\r\n            <NavLink to={path}>\r\n                <div className={s.dialogName}>\r\n                    {name}\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport \"./../Dialogs.module.css\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport \"./../../Navigation/Friends/Friend/Friend.module.css\"\r\nimport f from\"./../../Navigation/Friends/Friend/Friend.module.css\";\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n    fromYou: boolean,\r\n    photo: string\r\n}\r\n\r\nfunction Message({message, fromYou, photo}: MessagePropsType) {\r\n\r\n\r\n    let messagePosition = fromYou ? s.rightMessage : s.leftMessage;\r\n    let imgPosition = fromYou ? s.yourImg : s.personImg;\r\n    return (\r\n        <div className={messagePosition}>\r\n            <div className={`${imgPosition} ${f.circularLandscape} `}>\r\n                <img src={photo} alt=\"\"/>\r\n            </div>\r\n            <div className={s.message}>\r\n                {message}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {Field, Form} from 'react-final-form';\r\nimport {TextArea} from '../common/FormsControls/FormsControls';\r\nimport {combineValidators, isRequired, maxLength} from '../../utils/validation/validators';\r\n\r\ntype DialogsFormDataType = {\r\n    message: string\r\n}\r\n\r\n\r\ntype DialogsFormPropsType = {\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\nfunction DialogsForm(props: DialogsFormPropsType) {\r\n\r\n    const onMessageSubmit = (data: DialogsFormDataType) => {\r\n        props.sendMessage(data.message);\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={onMessageSubmit}\r\n              render={({handleSubmit, form, invalid}) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                      <Field name={'message'}\r\n                             component={TextArea}\r\n                             type={'textarea'}\r\n                             placeholder={'enter the message'}\r\n                             validate={combineValidators(isRequired, maxLength(15))}\r\n                      />\r\n                      <button type={'submit'}\r\n                              disabled={invalid}\r\n                              onMouseLeave={() => {\r\n                                  form.reset()\r\n                              }}>send\r\n                      </button>\r\n                  </form>\r\n              )}/>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogsForm;","import React from 'react';\r\nimport './Dialogs.module.css';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport DialogsForm from './DialogsForm';\r\n\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n    let dialogsElements = props.dialogs\r\n        .map(d => {\r\n            return (\r\n                    <DialogItem name={d.name} key={d.id} photo={d.photo}/>\r\n            )\r\n        });\r\n\r\n    let messagesElements = props.messages.map(m => <Message key={m.id} message={m.message} fromYou={m.fromYou}\r\n                                                            photo={m.photo}/>);\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div className={s.allMessages}>\r\n                    {messagesElements}\r\n                </div>\r\n                <div className={s.newMessage}>\r\n                    <DialogsForm sendMessage={props.sendMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\n\r\ntype AuthRoutePropsType = {\r\n    isAuth: boolean,\r\n    redirect: () => void\r\n}\r\n\r\n\r\nfunction WithAuthRedirect<T>(ComposedComponent: ComponentType<T>) {\r\n\r\n    function Authenticate(props: MapStatePropsType) {\r\n        const {isAuth, ...restProps} = props;\r\n        if (!props.isAuth)\r\n            return <Redirect to={\"/login\"}/>\r\n        return <ComposedComponent {...restProps as T}/>\r\n    }\r\n\r\n    type MapStatePropsType = {\r\n        isAuth: boolean\r\n    }\r\n\r\n    const mapStateToProps = (state: RootState): MapStatePropsType => ({\r\n        isAuth: state.auth.isAuthorized\r\n    })\r\n\r\n    return connect(mapStateToProps)(Authenticate)\r\n}\r\n\r\nexport default WithAuthRedirect;","import React from 'react';\r\nimport './Dialogs.module.css';\r\nimport {DialogType, MessageType, sendMessage} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../redux/redux-store';\r\nimport WithAuthRedirect from '../../hoc/AuthRoute/WithAuthRedirect';\r\nimport {compose} from '@reduxjs/toolkit';\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: Array<DialogType>,\r\n    messages: Array<MessageType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst mapStateToProps = (state: RootState): MapStatePropsType => ({\r\n    dialogs: state.messagesPage.dialogs,\r\n    messages: state.messagesPage.messages\r\n});\r\n\r\nconst mapDispatchToProps: MapDispatchPropsType = {\r\n    sendMessage\r\n};\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}