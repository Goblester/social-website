{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","redux/selectors/profile-selectors.ts","redux/selectors/auth-selectors.ts","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useState","editorMode","setEditorMode","status","setStatus","isMe","userId","profileId","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","type","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","userPhoto","alt","Post","message","likesCount","item","MyPostsForm","addPost","onSubmit","postData","post","render","handleSubmit","form","name","component","placeholder","validate","combineValidators","isRequired","maxLength","onMouseLeave","reset","MyPosts","React","memo","postsElements","posts","map","p","postsBlock","mapDispatchToProps","MyPostsContainer","connect","state","profilePage","Profile","console","log","getProfile","getStatus","getAuthId","auth","userData","id","ProfileContainer","Number","this","match","params","history","push","requestProfile","requestStatus","Preloader","Component","compose","withRouter"],"mappings":"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","file":"static/js/3.a48119ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2xJaO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3zfSV\",\"posts\":\"MyPosts_posts__2CbOe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2d5jo\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport './ProfileInfo.module.css';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    setStatus: (status: string) => void,\r\n    userId: number\r\n    profileId: number\r\n}\r\n\r\nexport function ProfileStatus(props: ProfileStatusPropsType) {\r\n    const [editorMode, setEditorMode] = useState<boolean>(false);\r\n    const [status, setStatus] = useState<string>(props.status);\r\n    const isMe = props.userId === props.profileId;\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onInputBlur = () => {\r\n        props.setStatus(status);\r\n        setEditorMode(false)\r\n    }\r\n\r\n    const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editorMode &&\r\n            <div>\r\n                <span onDoubleClick={() => isMe && setEditorMode(true)}>\r\n                    {props.status ? props.status : '-------'}\r\n                </span>\r\n            </div>\r\n            }\r\n            {editorMode && isMe &&\r\n            <div>\r\n                <input onChange={onInputChange}\r\n                       autoFocus={true}\r\n                       onBlur={onInputBlur}\r\n                       type=\"text\"\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n/*type ProfileStatusStateType = {\r\n    editorMode: boolean,\r\n    status: string\r\n}\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusPropsType, ProfileStatusStateType> {\r\n    constructor(props: ProfileStatusPropsType) {\r\n        super(props);\r\n        this.state = {\r\n            editorMode: false,\r\n            status: this.props.status\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<ProfileStatusStateType>) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({status: this.props.status});\r\n        }\r\n    }\r\n\r\n    onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({status: e.currentTarget.value});\r\n    }\r\n\r\n    setEditorMode = (editMode: boolean) => {\r\n        this.setState({editorMode: editMode});\r\n    }\r\n\r\n    onInputBlur = (e: FocusEvent<HTMLInputElement>) => {\r\n        this.setEditorMode(false);\r\n        this.props.setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    render() {\r\n        const isMe = this.props.userId === this.props.profileId\r\n        return (\r\n            <div>\r\n                {!this.state.editorMode &&\r\n                <div>\r\n                <span onDoubleClick={() => isMe && this.setEditorMode(true)}>\r\n                    {this.props.status ? this.props.status : '-------'}\r\n                </span>\r\n                </div>\r\n                }\r\n                {this.state.editorMode && isMe &&\r\n                <div>\r\n                    <input onChange={this.onInputChange}\r\n                           autoFocus={true}\r\n                           onBlur={this.onInputBlur}\r\n                           type=\"text\"\r\n                           value={this.state.status}/>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}*/\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport './ProfileInfo.module.css';\r\nimport s from './ProfileInfo.module.css';\r\nimport userPhoto from './../../../assets/images/userPhoto.png'\r\nimport ProfileStatus from './ProfileStatus';\r\nimport {ProfilePropsType} from '../Profile';\r\n\r\n\r\nfunction ProfileInfo({profile, setStatus, status, userId}: ProfilePropsType) {\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large !== null ? profile.photos.large : userPhoto} alt=\"\"/>\r\n                <div>\r\n                    <ProfileStatus setStatus={setStatus}\r\n                                   status={status}\r\n                                   userId={userId}\r\n                                   profileId={profile.userId}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport './Post.module.css';\r\nimport s from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n    message : string\r\n    likesCount: number\r\n}\r\n\r\n\r\nfunction Post({message, likesCount}:PostPropsType) {\r\n    return (\r\n        <div className={s.item}>\r\n            {message}\r\n            <div>\r\n                {likesCount} likes\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Field, Form } from 'react-final-form';\r\nimport {combineValidators, isRequired, maxLength} from '../../../utils/validation/validators';\r\n\r\ntype postDataType = {\r\n    post: string\r\n}\r\n\r\ntype MyPostsFormPropsType = {\r\n    addPost : (post: string)=>void\r\n}\r\n\r\nfunction MyPostsForm({addPost}:MyPostsFormPropsType){\r\n\r\n    const onPostSubmit = (postData: postDataType)=>{\r\n        addPost(postData.post);\r\n    }\r\n\r\n    return(\r\n        <Form onSubmit={onPostSubmit}\r\n        render={({handleSubmit, form})=>(\r\n            <form onSubmit={handleSubmit}>\r\n                <Field name={'post'}\r\n                       component={'input'}\r\n                       type={'textarea'}\r\n                       placeholder = {'enter post'}\r\n                       validate={combineValidators(isRequired, maxLength(10))}\r\n                />\r\n                       <button type={'submit'}\r\n                       onMouseLeave={()=>{form.reset()}}>post</button>\r\n            </form>\r\n        )}/>\r\n    )\r\n}\r\n\r\nexport default MyPostsForm;","import React, {ComponentType} from 'react';\r\nimport './MyPosts.module.css';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport MyPostsForm from './MyPostsForm';\r\n\r\n\r\nconst MyPosts = React.memo<ComponentType<MyPostsPropsType>>((props: MyPostsPropsType) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div>\r\n                My posts\r\n            </div>\r\n            <div>\r\n                <MyPostsForm addPost={props.addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPost, PostType} from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../../redux/redux-store';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (post:string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst mapStateToProps = (state: RootState): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps: MapDispatchPropsType = {\r\n    addPost\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {ComponentType} from 'react';\r\nimport './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string,\r\n    setStatus: (status: string) => void,\r\n    userId: number\r\n}\r\n\r\nconst Profile = React.memo<ComponentType<ProfilePropsType>>((props: ProfilePropsType) => {\r\n    console.log('RENDER');\r\n    console.log(props);\r\n    return (\r\n        <section>\r\n            <ProfileInfo {...props}/>\r\n            <MyPostsContainer/>\r\n        </section>\r\n    );\r\n})\r\n\r\nexport default Profile;","import {RootState} from '../redux-store';\r\n\r\nexport const getProfile = (state:RootState)=>{\r\n    return state.profilePage.profile\r\n}\r\n\r\nexport const getStatus = (state:RootState)=>{\r\n    return state.profilePage.status\r\n}","import {RootState} from '../redux-store';\r\n\r\nexport const getAuthId = (state:RootState)=>{\r\n    return state.auth.userData?.id\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Profile from './Profile';\r\nimport {RootState} from '../../redux/redux-store';\r\nimport {requestStatus, ProfileType, requestProfile, setStatus} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from '@reduxjs/toolkit';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport {getProfile, getStatus} from '../../redux/selectors/profile-selectors';\r\nimport {getAuthId} from '../../redux/selectors/auth-selectors';\r\n\r\n;\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, never> {\r\n\r\n    constructor(props: ProfileContainerPropsType) {\r\n        super(props);\r\n    };\r\n\r\n    componentDidMount() {\r\n        let userId = Number(this.props.match.params.userId);\r\n        if (!userId) {\r\n            userId = this.props.userId as number;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n\r\n        this.props.requestProfile(userId);\r\n        // setTimeout(() => {\r\n        this.props.requestStatus(userId);\r\n        //    }, 2000)\r\n\r\n    };\r\n\r\n    render() {\r\n        if (!this.props.profile) {\r\n            return (\r\n                <Preloader/>\r\n            );\r\n        }\r\n        return (\r\n            <Profile profile={this.props.profile} status={this.props.status} setStatus={this.props.setStatus}\r\n                     userId={this.props.userId as number}/>\r\n        );\r\n    };\r\n\r\n}\r\n\r\ntype ProfilePathParamsType = {\r\n    userId: string;\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    userId: number | undefined\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    requestProfile: (userId: number) => void,\r\n    setStatus: (status: string) => void,\r\n    requestStatus: (userId: number) => void\r\n};\r\n\r\ntype OwnProfileContainerPropsType = MapDispatchPropsType & MapStatePropsType;\r\n\r\ntype ProfileContainerPropsType = RouteComponentProps<ProfilePathParamsType> & OwnProfileContainerPropsType\r\n\r\nconst mapStateToProps = (state: RootState): MapStatePropsType => ({\r\n    profile: getProfile(state),\r\n    status: getStatus(state),\r\n    userId: getAuthId(state)\r\n});\r\n\r\n\r\nconst mapDispatchToProps: MapDispatchPropsType = {\r\n    requestProfile,\r\n    setStatus,\r\n    requestStatus,\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}